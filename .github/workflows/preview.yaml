name: CV Preview

on:
  pull_request:
    paths:
      - "**.typ"

permissions:
  issues: write
  pull-requests: write

jobs:
  build-and-preview:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Nix
        uses: cachix/install-nix-action@v22

      - name: Build CV in PDF
        run: |
          nix develop --command cv build
          nix develop --command cv preview

      - name: Upload CV PDF as artifact
        uses: actions/upload-artifact@v4
        with:
          name: cv-pdf
          path: cv.pdf

      - name: Comment PR with preview and download link
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const artifactName = 'cv-pdf';

            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            const matchArtifact = artifacts.artifacts.find((artifact) => {
              return artifact.name == artifactName
            });

            const artifactUrl = matchArtifact ? matchArtifact.archive_download_url : null;

            if (!artifactUrl) {
              console.log('Artifact not found');
              return;
            }

            const comment = `## CV Preview\n\n[Download Full CV (PDF)](${artifactUrl})`;

            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('## CV Preview')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
